
/* FreeRTOS includes. */
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "timers.h"
/* Xilinx includes. */
#include "xil_printf.h"
#include "xparameters.h"
/*user includes*/
#include "xil_mmu.h"
#include "Amplifier_Switch.h"
#include "ADDA.h"
#include "Communications_Protocol.h"
#include "My_kissFft.h"
/*-----------------------------------------------------------*/
/* 函数原型声明 */
static void prvAdDaTask( void *pvParameters );
/*-----------------------------------------------------------*/

/* 发送任务、接收任务、队列、定时器的句柄声明 */
static TaskHandle_t xAdDaTask;
static QueueHandle_t xQueue = NULL;

char HWstring[15] = "Hello World";//发送队列中的数据

int main( void )
{
	xTaskCreate( 	prvAdDaTask, 					/* 任务函数. */
					( const char * ) "ADDA", 		/* 任务的文本名，仅用于辅助调试 */
					configMINIMAL_STACK_SIZE, 	/* 任务的堆栈大小 */
					NULL, 						/* 传入任务函数的参数 未使用任务参数，所以设置为 NUL. */
					tskIDLE_PRIORITY,			/* 任务以空优先级运行 */
					&xAdDaTask );					/* 返回的任务句柄（任务控制块） */

	/* 创建队列 */
	xQueue = xQueueCreate( 	1,						/* 队列的能够存储的最大单元个数 */
							sizeof( HWstring ) );	/* 队列中数据单元的大小 */

	/*检测队列是否创建. */
	configASSERT( xQueue );


	/* 启动任务运行和定时器运行 */
	vTaskStartScheduler();

	/* 如果一切正常，调度器现在将运行，并且 main()函数将永远不会执行到下一行 ，如果下一行被执行了，很可能是没有足够的 FreeRTOS 堆内存来创建空闲任务*/
	for( ;; );
}


/*-----------------------------------------------------------*/
static void prvAdDaTask( void *pvParameters )
{
	xil_printf("CPU1: initializing\r\n");
//	sleep(15);				//必须要有等待linux启动
	/************************** DMA初始化 *****************************/
	int status;
	XAxiDma_Config *config;
	config = XAxiDma_LookupConfig(DMA_DEV_ID);
	if (!config) {
	    xil_printf("No config found for %d\r\n", DMA_DEV_ID);
	}
	//初始化DMA引擎
	status = XAxiDma_CfgInitialize(&axidma, config);
	if (status != XST_SUCCESS) {
	    xil_printf("Initialization failed %d\r\n", status);
	}
    //初始化dma标志信号
    tx_done = 0;
    error   = 0;

	/************************** 定时器初始化 *****************************/
	status = timer_init(&Timer);     								//定时器初始化
	if (status != XST_SUCCESS) {
		xil_printf("Timer Initial Failed\r\n");
	}
	Timer_Flag = 0;

	//建立中断系统
	status = setup_intr_system(&intc, &axidma, &Timer,
			DMA_RX_INTR_ID, ADCS_RX_INTR_ID,DMA_TX_INTR_ID, Overflow_INTR_ID, Underflow_INTR_ID, Switch_INT_ID, Amplifier_INT_ID, SOFT_INTR_ID_TO_CPU1,TIMER_IRPT_INTR);
	if (status != XST_SUCCESS) {
	    xil_printf("Failed intr setup\r\n");
	}

	/************************** 禁用Cache*****************************/
	Xil_SetTlbAttributes(Share_addr,0x14de2);    					//禁用OCM的Cache属性	//S=b1 TEX=b100 AP=b11, Domain=b1111, C=b0, B=b0
	Xil_SetTlbAttributes(JSON_ADDRESS,0x14de2);


	XScuTimer_Start(&Timer);         								//启动定时器
	xil_printf("CPU1: Initialization successfully\r\n");


	//写入下行JSON指令（测试用）
//	write_command_to_shared_memory();
	/************************** 测试FFT*****************************/
	numHarmonics[0] = 3;
	harmonics[0][0] = 0.2;
	harmonics[0][1] = 0.2;
	harmonics[0][2] = 0.15;

	numHarmonics[3] = 3;
	harmonics[3][0] = 0.2;
	harmonics[3][1] = 0.2;
	harmonics[3][2] = 0.15;
	//生成交流信号
	str_wr_bram();
    //映射到硬件
    for(int i = 0;i <8;i++){
    	ADC_ChannelEnable[i] = 1;
    }
	//开启ADC
	if(sizeof((int)ADC_ChannelEnable) / sizeof((int)ADC_ChannelEnable[0]) != 0){//数组不全为0，则开启ADC
		adc_start();
	}
	sleep(1);

    for(int i = 0;i <8;i++){
    	ADC_ChannelEnable[i] = 0;
    }
    // 分析第一个通道
    AnalyzeWaveform(&fundamental_frequency, &fundamental_value, harmonic_info, 0);

    // 输出结果
    printf("Fundamental Frequency: %f Hz\n", fundamental_frequency);
	printf("Fundamental Value: %f\n", fundamental_value);

	for (int i = 0; i < MAX_HARMONICS && harmonic_info[i][0] > 0; i++) {
	 printf("Harmonic %d: Frequency = %f Hz, Amplitude = %f, Percentage = %f%%\n",
			i + 1, harmonic_info[i][0], harmonic_info[i][1], harmonic_info[i][2]);
	}
    /************************** 测试FFT*****************************/

	while(1)
	{
		if(cpu1_SoftIntr_flag){
			//解析JSON指令
			Parse_JsonCommand();

			cpu1_SoftIntr_flag = 0;
			//给CPU0触发中断
			XScuGic_SoftwareIntr(&intc,SOFT_INTR_ID_TO_CPU0,CPU0_ID);
		}

		if(Timer_Flag && checkUdpStatus()){
			Timer_Flag = 0;											//1s的定时器里会把Timer_Flag置1
			//回报UDP结构体
			ReportUDP_Structure();
		}
	}
}





