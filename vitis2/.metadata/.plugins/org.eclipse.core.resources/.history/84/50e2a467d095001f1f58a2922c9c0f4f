
#include"My_kissFft.h"




float fundamental_frequency, fundamental_value;
float harmonic_info[MAX_HARMONICS][3] = {0};  // 每行存储频率、幅值和百分比

double FindFrequence(const int WaveData[], int data_length) {
    double likelihood[D_RANGE_MAX];
    double x_segment[N_APPROX];
    double b_y;
    int d, k;

    // 提取信号片段
    for (int i = 0; i < N_APPROX; i++) {
        x_segment[i] = (double)WaveData[i];
    }

    // 初始化似然数组
    memset(&likelihood[0], 0, D_RANGE_MAX * sizeof(double));

    // 计算最大似然估计
    for (d = 0; d < D_RANGE_MAX; d++) {
        double y[N_APPROX];
        for (k = 0; k < N_APPROX; k++) {
            b_y = (double)WaveData[k + d + 1] - x_segment[k];
            y[k] = b_y * b_y;
        }

        b_y = y[0];
        for (k = 1; k < N_APPROX; k++) {
            b_y += y[k];
        }

        likelihood[d] = -b_y;
    }

    // 找到最大似然估计的位置
    d = 0;
    for (k = 1; k < D_RANGE_MAX; k++) {
        if (likelihood[k] > likelihood[d]) {
            d = k;
        }
    }

    // 计算并返回估计频率
    return SAMPLE_RATE / ((double)d + 1);
}
void AnalyzeWaveform(float *fundamental_frequency, float *fundamental_value, float harmonic_info[][3],int channel) {
    const int exterded_radio = 2;  // 将波形扩展到2倍长度
    int N = SAMPLE_POINTS * exterded_radio;  // 扩展后的数据长度
    int extended_data[N];

    for(int j = 0;j < exterded_radio;j++){
    	for(int i = 0;i < sample_points;i++){
    		extended_data[i+j*sample_points] = Xil_In32(Share_addr + channel*sample_points*4 + j*sample_points*CHANNL_MAX*4 + i*4 );
    		//共享基地址 + 通道偏移地址 + 5次波形 + 单次1024个点
    	}
    }
    for(int i = 0;i < sample_points*exterded_radio;i++){
    	printf("x=%d\n", extended_data[i]);
    }
    // 基波频率检测
    *fundamental_frequency = FindFrequence(extended_data, N_APPROX);
    printf("Fundamental Frequency: %f Hz\n", *fundamental_frequency);

    // 根据基波频率设置采样频率 fs
    float fs = *fundamental_frequency * sample_points;

    // 准备 Kiss FFT 输入和输出
	kiss_fft_cfg cfg = kiss_fft_alloc(N, 0, NULL, NULL);
	kiss_fft_cpx in[N], out[N];

	for (int i = 0; i < N; i++) {
		in[i].r = (float)extended_data[i] / MAX_AMPLITUDE;  // 实部
		in[i].i = 0.0f;                                     // 虚部
	}

	// 执行 Kiss FFT
	kiss_fft(cfg, in, out);

    // 计算频谱幅值
    float P2[N];
    for (int i = 0; i < N; i++) {
        P2[i] = sqrt(out[i].r * out[i].r + out[i].i * out[i].i) / N;
    }

    // 只取一半频谱
    float P1[N / 2 + 1];
    for (int i = 0; i <= N / 2; i++) {
        P1[i] = P2[i];
        if (i > 0 && i < N / 2) {
            P1[i] *= 2;
        }
    }

    // 计算频率轴
    float f[N / 2 + 1];
    for (int i = 0; i <= N / 2; i++) {
        f[i] = i * fs / N;
    }

    // 查找频谱峰值
    int peak_indices[MAX_HARMONICS];
    int peak_count = 0;
    float max_peak_value = -INFINITY;

    for (int i = 1; i < N / 2; i++) {
        if (P1[i] > P1[i - 1] && P1[i] > P1[i + 1]) {
        	// 限制频率倍数，忽略非基波整数倍位置的谐波
        	float harmonic_ratio = f[i] / *fundamental_frequency;
        	if (fabs(round(harmonic_ratio) - harmonic_ratio) > 0.1 || f[i] > HARMONIC_FREQ_LIMIT) continue;

            peak_indices[peak_count++] = i;
            if (P1[i] > max_peak_value) {
                max_peak_value = P1[i];
            }
            if (peak_count >= MAX_HARMONICS) break;
        }
    }

    // 设置基波值
    *fundamental_value = max_peak_value;
    *fundamental_frequency = f[peak_indices[0]];

    // 计算谐波信息
    int harmonic_idx = 0;
    for (int i = 1; i < peak_count; i++) {
        float harmonic_value = P1[peak_indices[i]];
        float harmonic_frequency = f[peak_indices[i]];
        float percentage_of_fundamental = (harmonic_value / *fundamental_value) * 100;

        // 只记录超出阈值的谐波，并忽略3200Hz以上的谐波
        if (percentage_of_fundamental < THRESHOLD_PERCENTAGE || harmonic_frequency > HARMONIC_FREQ_LIMIT) {
            break;
        }

        harmonic_info[harmonic_idx][0] = harmonic_frequency;
        harmonic_info[harmonic_idx][1] = harmonic_value;
        harmonic_info[harmonic_idx][2] = percentage_of_fundamental;
        harmonic_idx++;
    }

    // 释放 Kiss FFT 配置
    free(cfg);
}
// 冒泡法排序函数
void BubbleSort(float pt[], int Cnt)
{
	int     k      = 0;
        float temp = 0;
	while (Cnt > 0)
	{
		for (k=0; k<Cnt-1; k++)
		{
			if (pt[k] < pt[k+1])
			{
				temp    = pt[k];
				pt[k]   = pt[k+1];
				pt[k+1] = temp;
			}
		}
		Cnt--;
	}
}

//复数乘法
struct compx EE(struct compx b1, struct compx b2)
{
	struct compx b3;
	b3.real = b1.real*b2.real - b1.imag*b2.imag;
	b3.imag = b1.real*b2.imag + b1.imag*b2.real;
	return (b3);
}

//快速傅立叶变换-FFT
bool is_power_of_two(int n) {
    return (n > 0) && ((n & (n - 1)) == 0);
}

void FFT(struct compx *xin, int Num) {
    if (!is_power_of_two(Num)) {
        printf("Error: Num must be a power of 2.\n");
        return;
    }

    int f, m, LH, nm, i, k, j, L;
    double p, ps;
    int le, B, ip;
    float pi = 3.14159265358979323846;
    struct compx w, t;

    LH = Num / 2;
    f = Num;
    for (m = 1; (f = f / 2) != 1; m++); // 2^m = N

    for (L = m; L >= 1; L--) {
        le = (int)pow(2, L);
        B = le / 2;
        for (j = 0; j <= B - 1; j++) {
            p = pow(2, m - L) * j;
            ps = 2 * pi / Num * p;
            w.real = cos(ps);
            w.imag = -sin(ps);
            for (i = j; i <= Num - 1; i += le) {
                ip = i + B;
                t = xin[i];
                xin[i].real = xin[i].real + xin[ip].real;
                xin[i].imag = xin[i].imag + xin[ip].imag;
                xin[ip].real = t.real - xin[ip].real;
                xin[ip].imag = t.imag - xin[ip].imag;
                struct compx temp = { xin[ip].real * w.real - xin[ip].imag * w.imag,
                                      xin[ip].real * w.imag + xin[ip].imag * w.real };
                xin[ip] = temp;
            }
        }
    }

    // 变址运算
    nm = Num - 2;
    j = Num / 2;
    for (i = 1; i <= nm; i++) {
        if (i < j) {
            t = xin[j];
            xin[j] = xin[i];
            xin[i] = t;
        }
        k = LH;
        while (j >= k && k > 0) {  // 添加 k > 0 的检查以避免死循环
            j = j - k;
            k = k / 2;
        }
        j += k;
    }
}
