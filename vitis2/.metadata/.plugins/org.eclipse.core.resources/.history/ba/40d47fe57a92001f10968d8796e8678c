#include "stdio.h"
#include <stdint.h>
#include "xparameters.h"
#include "xil_exception.h"
#include "xscugic.h"
#include "sleep.h"
#include "xscutimer.h"					//定时器中断的函数声明
#include "xstatus.h"
#include "xplatform_info.h"
#include "xaxidma.h"
#include <math.h>
#include "xbram_hw.h"

#include"Amplifier_Switch.h"
#include "Communications_Protocol.h"
/*
 * 定义
 */
//共享内存
#define RTOS_base_addr		0x21000000
#define Share_addr			0x3C000000
#define AD_MEM_OFFECT       400  					//设定存放AD数据的偏移地址

//定时器
#define TIMER_DEVICE_ID     XPAR_XSCUTIMER_0_DEVICE_ID   //定时器ID
#define TIMER_IRPT_INTR     XPAR_SCUTIMER_INTR           //定时器中断ID
#define TIMER_LOAD_VALUE    0x13D92D3B                   //定时器装载1s

//软中断
#define CPU0_ID              XSCUGIC_SPI_CPU0_MASK        //CPU0 ID
#define CPU1_ID              XSCUGIC_SPI_CPU1_MASK        //CPU1 ID
#define SOFT_INTR_ID_TO_CPU0 14                            //软件中断号 14 ,范围：0~15
#define SOFT_INTR_ID_TO_CPU1 15                            //软件中断号 15 ,范围：0~15

//dma中断
#define dac_whole_base_addr XPAR_AC_8_CHANNEL_0_ADDA_DAC_WHOLE_0_BASEADDR
#define	adc_whole_base_addr	XPAR_AC_8_CHANNEL_0_ADDA_ADC_WHOLE_0_BASEADDR
#define DMA_DEV_ID          XPAR_AXIDMA_0_DEVICE_ID
#define INTC_DEVICE_ID       XPAR_SCUGIC_SINGLE_DEVICE_ID

//dma_adc
#define DMA_RX_INTR_ID      XPAR_FABRIC_AC_8_CHANNEL_0_ADDA_AXI_DMA_0_S2MM_INTROUT_INTR	//DMA中断号，63
#define ADCS_RX_INTR_ID		XPAR_FABRIC_AC_8_CHANNEL_0_ADDA_ADC_WHOLE_0_ADC_END_INTR_INTR   //adc中断号，64
#define sample_points  1024       //一个周期采样1024或者2048

//dma_dac
#define DMA_TX_INTR_ID      XPAR_FABRIC_AC_8_CHANNEL_0_ADDA_AXI_DMA_0_MM2S_INTROUT_INTR	 //DMA中断号，65
#define Overflow_INTR_ID	66U   //FIFO满中断
#define Underflow_INTR_ID   67U   //FIFO空中断
#define DDR_BASE_ADDR		Share_addr   //0x00100000 XPAR_PS7_DDR_0_S_AXI_BASEADDR
#define MEM_BASE_ADDR       (DDR_BASE_ADDR + 0x1000000)     //0x01100000
#define TX_BUFFER_BASE      (MEM_BASE_ADDR + 0x00100000)    //0x01200000
#define RX_BUFFER_BASE      (MEM_BASE_ADDR + 0x00300000)    //0x01400000
#define RESET_TIMEOUT_COUNTER   10000    //复位时间
#define DATA_LEN			1024						//波形采样长度
#define Data_Width			65535

//bram
#define BRAM_DATA_BYTE      4  										//BRAM数据字节个数
#define CHANNL_MAX			8
#define MAX_HARMONICS 		 32						// 最大谐波次数
/*
 * 变量
 */
//波形修改参数
extern uint16_t Wave_NewData[8][DATA_LEN];
extern float Phase_shift[8];		//8路波形相位偏移 单位度
extern u32 enable;//使能通道输出
extern float Wave_Frequency;
extern float Wave_Amplitude[8];
extern u32 Wave_Range[8];
extern u8 ADC_ChannelEnable[8];

extern u32 ADC_Sampling;
extern int dma_rx_8[8][sample_points];
extern  XAxiDma axidma;     //XAxiDma实例
extern  XScuGic intc;       //中断控制器的实例
extern volatile int rx_done;      //接收完成标志
extern volatile int tx_done;      //发送完成标志
extern volatile int error;        //传输出错标志
extern int cpu1_SoftIntr_flag;     //软件中断的标志

extern int numHarmonics[CHANNL_MAX];                  	//每个通道有几个谐波
extern float harmonics[CHANNL_MAX][MAX_HARMONICS];		//每个通道每次谐波的幅值
extern float harmonics_phases[CHANNL_MAX][MAX_HARMONICS];			//每个通道每次谐波的相位
/*
 * 函数
 */
 void dma_dac_init();
 void dds_dac_init();
 void adc_start();
//adc
 int code_to_real(u16 x);
 void Adc_Data_processing();

 void rx_intr_handler(void *callback);
 void adcS_intr_handler(void *callback);
//dma_dac
 void tx_intr_handler(void *callback);
 void overflow_handler();
 void underflow_handler();

//中断初始化
 int setup_intr_system(XScuGic * int_ins_ptr, XAxiDma * axidma_ptr,XScuTimer *timer_ptr,
		u16 rx_intr_id, u16 adcS_id, u16 tx_intr_id, u16 overflow_id, u16 underflow_id, u16 switch_id,u16 amplifier_id,u16 SoftIntrCpu1_id)

 void start_dma_dac();
//dds_dac
 void str_wr_bram();
 void changePhase(uint16_t NewData[], int Array_Length, float Phase_Degress);
 void Write_Wave_to_Wave_NewData();
 void Copy_Wave_to_tx_buffer_ptr();
 void soft_intr_handler();

 double sumHarmonics(float harmonics[], int numHarmonics);
 void addHarmonics(uint16_t NewData[], int Array_length, float Base_Phase_Degrees, int numHarmonics, float harmonics[], float harmonics_phases[]);
