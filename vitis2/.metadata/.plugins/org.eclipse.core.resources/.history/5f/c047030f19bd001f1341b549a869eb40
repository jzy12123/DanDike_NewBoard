/*
 * Amplifier_Switch.c
 *
 *  Created on: 2024年2月1日
 *      Author: saber
 */
#include"Amplifier_Switch.h"

void RdSerial(){
	char s[10];
	Xil_Out32(Amplifier_Switch_BASEADDR + Module_Status_ADDR , (u32)0x00000200);

	itoa((u8)Xil_In32(Amplifier_Switch_BASEADDR + RdSerial_ADDR), s, 2);
	xil_printf("rd_from_amplifier_serial8bit Data : %s\n" , s);
}

// 根据输入电压返回对应的输出值
unsigned char voltage_to_output(float voltage) {
    if (voltage == 6.5) {
        return 0xC2;
    } else if (voltage == 3.25) {
        return 0xD4;
    } else if (voltage == 1.876) {
        return 0xA0;
    } else {
        return 0x00; // 默认返回值，表示输入无效
        xil_printf("CPU1: UR NOT CORRECT\n");
    }
}

// 根据输入电流返回对应的输出值
unsigned char current_to_output(float current) {
    if (current == 5.0) {
        return 0xC2;
    } else if (current == 1.0) {
        return 0x92;
    } else if (current == 0.2) {
        return 0xA4;
    } else {
        return 0x00; // 默认返回值，表示输入无效
        xil_printf("CPU1: IR NOT CORRECT\n");
    }
}

void power_amplifier_control(float Wave_Amplitude[],u32 Wave_Range[]){
	//////////////////////////////////////////////////////////////////////////////////////////////////////////
	//配置595 不开启使能
	//二级DA start清0; 595置1 1595置0;功放start清0
	//////////////////////////////////////////////////////////////////////////////////////////////////////////
	Xil_Out32(Amplifier_Switch_BASEADDR + Module_Status_ADDR , (u32)0x00000002);
	usleep(1000);
	// 595中的7引脚 ！EN信号对应rd_from_serial8bit读回数据 是0还是1，向595 中写00001000，读回 个是故障信号
	//二进制数据		0 1 2 3 4  5  6  7   对应位数取反
	//对应595引脚	4 5 6 7 14 15 16 17

	Xil_Out32(Amplifier_Switch_BASEADDR + Amplifier_Din0_ADDR, (u32)((Wave_Range[1] & 0x7F) << 24) | ((Wave_Range[0] & 0x7F) << 8)); //ub + ua din0发送 00000000为高电平
	Xil_Out32(Amplifier_Switch_BASEADDR + Amplifier_Din1_ADDR, (u32)((Wave_Range[3] & 0x7F) << 24) | ((Wave_Range[2] & 0x7F) << 8)); //ux + uc din1发送 ff00为低电平 ux为低，uc为高	// rd_from_serial8bit中该通道读回为0
	Xil_Out32(Amplifier_Switch_BASEADDR + Amplifier_Din2_ADDR, (u32)((Wave_Range[5] & 0x7F) << 24) | ((Wave_Range[4] & 0x7F) << 8)); //ib + ia din2发送
	Xil_Out32(Amplifier_Switch_BASEADDR + Amplifier_Din3_ADDR, (u32)((Wave_Range[7] & 0x7F) << 24) | ((Wave_Range[6] & 0x7F) << 8)); //ix + ic din3发送

	//二级DA start清0; 595置1 1595置0;  功放start置1
	Xil_Out32(Amplifier_Switch_BASEADDR + Module_Status_ADDR , (u32)0x00000102);
	usleep(1000);
	xil_printf("CPU1:Amplifier config done = %d\r\n",  (Xil_In32(Amplifier_Switch_BASEADDR + Module_Status_ADDR) & 0x8000) >> 15);  //返回1，则配置完成

	//////////////////////////////////////////////////////////////////////////////////////////////////////////
	//配置595 开启使能最高位写1
	//二级DA start清0; 595置1 1595置0;功放start清0
	//////////////////////////////////////////////////////////////////////////////////////////////////////////
	Xil_Out32(Amplifier_Switch_BASEADDR + Module_Status_ADDR , (u32)0x00000002);
	usleep(1000);

	Xil_Out32(Amplifier_Switch_BASEADDR + Amplifier_Din0_ADDR, (u32)(Wave_Range[1] << 24) | (Wave_Range[0] << 8)); //ub + ua din0发送 00000000为高电平
	Xil_Out32(Amplifier_Switch_BASEADDR + Amplifier_Din1_ADDR, (u32)(Wave_Range[3] << 24) | (Wave_Range[2] << 8)); //ux + uc din1发送 ff00为低电平 ux为低，uc为高	// rd_from_serial8bit中该通道读回为0
	Xil_Out32(Amplifier_Switch_BASEADDR + Amplifier_Din2_ADDR, (u32)(Wave_Range[5] << 24) | (Wave_Range[4] << 8)); //ib + ia din2发送
	Xil_Out32(Amplifier_Switch_BASEADDR + Amplifier_Din3_ADDR, (u32)(Wave_Range[7] << 24) | (Wave_Range[6] << 8)); //ix + ic din3发送

	//二级DA start清0; 595置1 1595置0;  功放start置1
	Xil_Out32(Amplifier_Switch_BASEADDR + Module_Status_ADDR , (u32)0x00000102);
	usleep(1000);
	xil_printf("CPU1:Amplifier config done = %d\r\n",  (Xil_In32(Amplifier_Switch_BASEADDR + Module_Status_ADDR) & 0x8000) >> 15);  //返回1，则配置完成

	//////////////////////////////////////////////////////////////////////////////////////////////////////////
	//配置1595
	//二级DA 开关量start清0; 595置0 1595置1;  功放start清0
	//////////////////////////////////////////////////////////////////////////////////////////////////////////
	Xil_Out32(Amplifier_Switch_BASEADDR + Module_Status_ADDR , (u32)0x00000001);
	xil_printf("CPU1:Amplifier config clear = %d\r\n",  (Xil_In32(Amplifier_Switch_BASEADDR + Module_Status_ADDR) & 0x8000) >> 15);  //返回0，则配置完成
	usleep(1000);
//	u32 num = (((u32)(Wave_Amplitude[2] * 65535 / 100)) << 16) + (u32)(Wave_Amplitude[0] * 65535 / 100);
	Xil_Out32(Amplifier_Switch_BASEADDR + Amplifier_Din0_ADDR, (((u32)(Wave_Amplitude[1] * 37072 / 100)) << 16) + (u32)(Wave_Amplitude[0] * 37072 / 100)); //din0发送，8000半幅值，ub + ua
	Xil_Out32(Amplifier_Switch_BASEADDR + Amplifier_Din1_ADDR, (((u32)(Wave_Amplitude[3] * 37072 / 100)) << 16) + (u32)(Wave_Amplitude[2] * 37072 / 100)); //din1发送，半幅值，ux + uc
	Xil_Out32(Amplifier_Switch_BASEADDR + Amplifier_Din2_ADDR, (((u32)(Wave_Amplitude[5] * 37072 / 100)) << 16) + (u32)(Wave_Amplitude[4] * 37072 / 100)); //din2发送，ib + ia
	Xil_Out32(Amplifier_Switch_BASEADDR + Amplifier_Din3_ADDR, (((u32)(Wave_Amplitude[7] * 37072 / 100)) << 16) + (u32)(Wave_Amplitude[6] * 37072 / 100)); //din3发送，ix + ic

	//二级DA 开关量start清0; 595置0 1595置1;  功放start置1
	Xil_Out32(Amplifier_Switch_BASEADDR + Module_Status_ADDR , (u32)0x00000101);
	xil_printf("CPU1:Amplifier config done = %d\r\n",  (Xil_In32(Amplifier_Switch_BASEADDR + Module_Status_ADDR) & 0x8000) >> 15);  //返回1，则配置完成
}

void Write_Read_Switch(u32 Data_width,u32 Data){
	u32 Read_Switch;

	//开关量为8位 开关量start清0  关闭595 1595使能  功放start清0
	Xil_Out32(Amplifier_Switch_BASEADDR + Module_Status_ADDR , (u32)(0x00000000 | (Data_width+1)<<16));
	usleep(10000);
	//开关量为8位 开关量start置1  关闭595 1595使能  功放start清0
	Xil_Out32(Amplifier_Switch_BASEADDR + Module_Status_ADDR , (u32)(0x01000000 | (Data_width+1)<<16));
	usleep(10000);
	///////////////////////////////////////////////////////////////////
	//模块进行一次读写
	///////////////////////////////////////////////////////////////////
	//开关量为8位 开关量start清0  关闭595 1595使能  功放start清0
	Xil_Out32(Amplifier_Switch_BASEADDR + Module_Status_ADDR , (u32)(0x00000000 | (Data_width+1)<<16));
	usleep(10000);
	//开关量为8位 开关量start置1  关闭595 1595使能  功放start清0
	Xil_Out32(Amplifier_Switch_BASEADDR + Module_Status_ADDR , (u32)(0x01000000 | (Data_width+1)<<16));
	usleep(10000);

	//开关量模块输出
	Xil_Out32(Amplifier_Switch_BASEADDR + Switch_Write_ADDR ,(u32) Data);
	//开关量模块输入
	switch(Data_width){
		case 0:
			Read_Switch = (u8)invert_Binary(Xil_In32(Amplifier_Switch_BASEADDR + Switch_Read_ADDR));
			break;
		case 1:
			Read_Switch = (u16)invert_Binary(Xil_In32(Amplifier_Switch_BASEADDR + Switch_Read_ADDR));
			break;
		case 2:
			Read_Switch = (u32)invert_Binary(Xil_In32(Amplifier_Switch_BASEADDR + Switch_Read_ADDR));
			break;
		case 3:
			Read_Switch = (u32)invert_Binary(Xil_In32(Amplifier_Switch_BASEADDR + Switch_Read_ADDR));
			break;
		default:
			break;
	}
	char s[32];
	itoa(Read_Switch, s, 2);
	xil_printf("Read switch_mudule Data : %s\n" , s);
}
u32 invert_Binary (u32 num){
	u32 m1 = 0x55555555; // 01010101...
	u32 m2 = 0x33333333; // 00110011...
	u32 m4 = 0x0f0f0f0f; // 00001111...
//	u32 m8 = 0x00ff00ff; // 0000000011111111

	num = ((num >> 1) & m1) | ((num & m1) << 1);
	num = ((num >> 2) & m2) | ((num & m2) << 2);
	num = ((num >> 4) & m4) | ((num & m4) << 4);
//	num = ((num >> 8) & m8 )| ((num & m8) << 8);
//	num = num >> 16 | num << 16;

	return num;
}
void Switch_INT_handler(){
//	printf("Switch_Done");
}
void Amplifier_INT_handler(){
//	printf("Amplifier_Done");
}
